.namespace "AG_HEAP_"

;------------------------------------------------------------------------------
;; # Simple heap memory allocator
;------------------------------------------------------------------------------

.symbol ENDPTR: word "Pointer to the beginning of unsegmented memory"
    dat AG_HEAP_BASE

.symbol FREEPTRARY: word[16] "Free list head pointers, indexed by log2(size)"
    dat 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

;------------------------------------------------------------------------------
.symbol ALLOC: subroutine(in *index*, out *address*) "Allocate space on the heap"
;------------------------------------------------------------------------------
;; | Register | Mode | Description |
;; | - | - | - |
;; | `A` | in | **index**: allocation pool index, equal to the base 2 logarithm of the allocation size |
;; | `B` | out | **address**: base address of allocation |
;; | `C` | out | **size**: allocation size (equal to `2 ** index`) |
;;
;; TODO: use the free pointer address instead of index for reduced overhead
;------------------------------------------------------------------------------
    set b, [AG_HEAP_FREEPTRARY + a]
    ; b: pointer to last freed allocation of same size, or null
    ife b, 0 ; if null, grow heap
        add pc, .GROW - .NOGROW
    ; else allocate from free list
.NOGROW:
    set [AG_HEAP_FREEPTRARY + a], [b]
    ; b: allocated address
    set pc, pop
.GROW:
    set b, [AG_HEAP_ENDPTR]
    ; b: allocated address
    set c, 1
    shl c, a
    ; c: allocation size
    add [AG_HEAP_ENDPTR], c
    set pc, pop

;------------------------------------------------------------------------------
.symbol FREE: subroutine(in *index*, in *address*) "Free allocated space on the heap"
;------------------------------------------------------------------------------
;; | Register | Mode | Description |
;; | - | - | - |
;; | `A` | in | **index**: allocation pool index that was used to allocate the memory |
;; | `B` | in | **address**: base address of allocation to free |
;------------------------------------------------------------------------------
    set [b], [AG_HEAP_FREEPTRARY + a]
    set [AG_HEAP_FREEPTRARY + a], b
    set pc, pop
