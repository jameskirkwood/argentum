.namespace "AG_THREAD_"

;------------------------------------------------------------------------------
;; # Direct threaded multitasking execution engine
;------------------------------------------------------------------------------

;------------------------------------------------------------------------------
.symbol ACTIVEPTR: word "Pointer to the currently active process"
;------------------------------------------------------------------------------
;; TODO: Pointing this variable to a process object shall cause that process to
;; execute following the next interleave. A scheduler should be responsible for
;; updating this variable at the appropriate time.
;------------------------------------------------------------------------------
    dat 0

;------------------------------------------------------------------------------
.symbol ENTER: machine code "Execute an inline threaded instruction sequence"
;------------------------------------------------------------------------------
;; ### Inline Arguments
;;
;; | Offset | Size | Description |
;; | - | - | - |
;; | 0 | 1 | Base 2 logarithm of the (power of two) size of the stack frame to allocate |
;; | 1 | 1+ | Sequence of threaded instructions |
;;
;; ### Explanation
;;
;; Within a **function** (written in machine code), `JSR AG_THREAD_ENTER`
;; transitions to threaded execution, pushing a new **frame** onto the call
;; stack and executing a threaded instruction sequence, stored immediately
;; after the branch.
;;
;; A **threaded instruction sequence** is a **function** address followed by
;; any inline arguments. It is, strictly speaking, not a sequence. Most
;; functions expect a threaded instruction sequence as their final inline
;; argument, to be executed afterwards. Thus, through recursion, one threaded
;; instruction sequence may contain arbitrarily many others.
;;
;; The new **frame** contains the following:
;; - The frame and machine stack pointers to be restored when the threaded
;;   instruction sequence executes AG_THREAD_EXIT
;; - Space for the local variables used by the threaded instruction sequence
;; - Space for the machine stack at its maximum size during the execution of
;;   the threaded instruction sequence
;;
;; The machine stack size must include any data pushed during the execution of
;; any called **functions** (eg. one word for a function beginning with
;; `JSR AG_THREAD_ENTER`), plus two words in case of an interrupt.
;------------------------------------------------------------------------------
    ; i: threaded return address
    ; [z]: caller frame pointer
    set x, pop
    ; x: address of word immediately following the jsr
    set a, [x]
    ; a: base 2 logarithm of size of stack frame to be allocated
    jsr AG_HEAP_ALLOC ; (in a: index, out b: address, out c: size)
    ; b: new frame pointer
    ; c: frame size
    set push, i ; save the instruction pointer on the caller's stack
    set [b], [z] ; save the frame pointer at the callee's [frame_ptr + 0]
    set [b + 1], sp ; save the stack pointer at the callee's [frame_ptr + 1]
    add c, b
    ; c: new stack pointer
    sti i, x ; update instruction pointer
    set [z], b ; update frame pointer
    set sp, c ; update stack pointer (atomically!!!)
    sti pc, [i] ; execute first bead in the thread

;------------------------------------------------------------------------------
.symbol EXIT: term function(!index) "Threaded return to caller"
;------------------------------------------------------------------------------
;; ### Inline Arguments
;;
;; | Offset | Size | Description |
;; | - | - | - |
;; | 0 | 1 | Base 2 logarithm of the (power of two) size of the returning stack frame |
;------------------------------------------------------------------------------
    ; [z]: returning frame pointer
    set b, [z]
    ; b: returning frame pointer
    set [z], [b] ; restore frame pointer
    set sp, [b + 1] ; restore stack pointer (atomically!!!)
    set [z + 1], pop ; pop and back up saved instruction pointer
    set [z + 2], sp ; back up stack pointer
    set a, [i]
    ; a: base 2 logarithm of frame size
    jsr AG_HEAP_FREE ; (in a: index, in b: address) ; free returning frame
    set z, [AG_THREAD_ACTIVEPTR] ; interleave processes
    set i, [z + 1] ; restore instruction pointer
    set sp, [z + 2] ; restore stack pointer
    sti pc, [i]
